"""Proto-DDF Generator - Generate Reflex Applications

This is the main generator interface for creating Reflex applications.
"""

import logging
import random
from pathlib import Path
from typing import Dict, List

import reflex as rx

# Configure logging
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# Add file handler
fh = logging.FileHandler("proto_ddf_generator.log")
fh.setLevel(logging.DEBUG)
formatter = logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s"
)
fh.setFormatter(formatter)
logger.addHandler(fh)

logger.info("=" * 80)
logger.info("Proto-DDF Generator - Application Starting")
logger.info("=" * 80)


class GeneratorState(rx.State):
    """The generator app state."""

    # Project settings
    project_name: str = ""
    project_description: str = ""

    # Generated apps - dynamically configured
    generated_apps: List[Dict] = [
        {
            "name": "NetSuite Integration Hub",
            "description": "Multi-source data integration showcase",
            "path": "generated/netsuite_integration_hub",
            "status": "ready",
            "port": 3459,  # Will be dynamically set from config
        }
    ]

    # Generation status
    generation_status: str = "idle"
    generation_message: str = ""

    def generate_app(self):
        """Generate a new Reflex application."""
        logger.info(f"generate_app called - project_name: {self.project_name}")

        if not self.project_name:
            self.generation_message = "Please provide a project name"
            self.generation_status = "error"
            return

        self.generation_status = "generating"
        self.generation_message = f"Generating {self.project_name}..."
        yield

        try:
            # Create app directory
            app_name = self.project_name.lower().replace(" ", "_")
            app_dir = Path("generated") / app_name

            if app_dir.exists():
                self.generation_status = "error"
                self.generation_message = f"App '{app_name}' already exists!"
                logger.error(f"App directory already exists: {app_dir}")
                return

            logger.info(f"Creating app directory: {app_dir}")
            app_dir.mkdir(parents=True, exist_ok=True)

            # Create app subdirectory
            app_module_dir = app_dir / f"{app_name}_app"
            app_module_dir.mkdir(exist_ok=True)

            # Assign random port
            app_port = random.randint(3000, 5000)

            # Create __init__.py
            (app_module_dir / "__init__.py").write_text("")

            # Create main app file
            main_app_code = f'''"""
{self.project_name} - Generated by Proto-DDF

{self.project_description or "A Reflex application"}
"""

import reflex as rx


class State(rx.State):
    """The app state."""

    message: str = "Hello from {self.project_name}!"


def index() -> rx.Component:
    """Main page."""
    return rx.container(
        rx.color_mode.button(position="top-right"),
        rx.vstack(
            rx.heading("{self.project_name}", size="9", gradient=True),
            rx.text(
                "{self.project_description or "Welcome to your new Reflex app!"}",
                size="4",
                color="gray",
            ),
            rx.card(
                rx.vstack(
                    rx.heading("🎨 Getting Started", size="6"),
                    rx.text(
                        "This is your generated Reflex application. Edit the code in:",
                        size="3",
                    ),
                    rx.code(
                        "generated/{app_name}/{app_name}_app/{app_name}.py",
                        size="2",
                    ),
                    rx.divider(),
                    rx.text(State.message, size="4", weight="bold"),
                    spacing="4",
                ),
                padding="6",
            ),
            spacing="6",
            align="center",
            padding="4",
        ),
        padding="4",
    )


app = rx.App()
app.add_page(index, title="{self.project_name}")
'''
            (app_module_dir / f"{app_name}.py").write_text(main_app_code)

            # Create rxconfig.py
            rxconfig_code = f'''"""Reflex configuration for {self.project_name}."""

import reflex as rx

config = rx.Config(
    app_name="{app_name}_app",
    app_module_import="{app_name}_app.{app_name}",
    backend_port={app_port},
    frontend_port={app_port + 1},
)
'''
            (app_dir / "rxconfig.py").write_text(rxconfig_code)

            # Create requirements.txt
            requirements_code = """reflex>=0.6.0
"""
            (app_dir / "requirements.txt").write_text(requirements_code)

            # Create run.sh
            run_sh_code = f"""#!/bin/bash

echo "🚀 Starting {self.project_name}..."

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "📦 Creating virtual environment..."
    python3 -m venv venv
fi

# Activate virtual environment
source venv/bin/activate

# Install dependencies if needed
if ! pip show reflex > /dev/null 2>&1; then
    echo "📥 Installing dependencies..."
    pip install -q -r requirements.txt
fi

echo "✨ App will be available at:"
echo "   Frontend: http://localhost:{app_port + 1}"
echo "   Backend:  http://localhost:{app_port}"
echo ""

# Run the app
reflex run
"""
            run_sh_path = app_dir / "run.sh"
            run_sh_path.write_text(run_sh_code)
            run_sh_path.chmod(0o755)  # Make executable

            # Create .gitignore
            gitignore_code = """venv/
__pycache__/
*.pyc
.web/
*.log
"""
            (app_dir / ".gitignore").write_text(gitignore_code)

            # Add to generated_apps list
            new_app = {
                "name": self.project_name,
                "description": self.project_description or "A Reflex application",
                "path": f"generated/{app_name}",
                "status": "ready",
                "port": app_port + 1,
            }
            self.generated_apps.append(new_app)

            self.generation_status = "success"
            self.generation_message = f"Successfully generated {self.project_name}! Run it with: cd generated/{app_name} && ./run.sh"
            logger.info(f"Successfully generated app: {app_name} at {app_dir}")

        except Exception:
            self.generation_status = "error"
            self.generation_message = "Error generating app: {str(e)}"
            logger.error("Error generating app: {e}", exc_info=True)

    def set_project_name(self, name: str):
        """Set the project name."""
        self.project_name = name

    def set_project_description(self, description: str):
        """Set the project description."""
        self.project_description = description


def app_card(app: Dict) -> rx.Component:
    """
    Create a card component for displaying generated application information.

    Args:
        app: Dictionary containing app information with keys:
            - name: Application name
            - description: Brief app description
            - status: Current status ("ready", "running", etc.)
            - port: Port number the app runs on

    Returns:
        rx.Component: A card component displaying app details and actions
    """
    return rx.card(
        rx.vstack(
            # App title and description
            rx.heading(app["name"], size="5"),
            rx.text(app["description"], size="2", color="gray"),
            # Status and port information
            rx.hstack(
                rx.badge(
                    app["status"],
                    color=rx.cond(app["status"] == "ready", "green", "gray"),
                ),
                rx.text(f"Port: {app['port']}", size="2", color="gray"),
                spacing="2",
            ),
            # Action buttons
            rx.hstack(
                rx.button(
                    "Open",
                    on_click=lambda: rx.redirect(f"http://127.0.0.1:{app['port']}"),
                    variant="soft",
                    size="2",
                ),
                rx.button("View Code", variant="outline", size="2"),
                spacing="2",
            ),
            spacing="3",
            align="start",
            width="100%",
        ),
        padding="4",
        width="100%",
    )


def index() -> rx.Component:
    """Main generator interface."""
    return rx.container(
        rx.color_mode.button(position="top-right"),
        rx.vstack(
            # Header
            rx.vstack(
                rx.heading("🎨 Proto-DDF Generator", size="9", gradient=True),
                rx.text(
                    "Generate Reflex applications with AI-powered code generation",
                    size="4",
                    color="gray",
                    align="center",
                ),
                align="center",
                spacing="2",
                padding_bottom="4",
            ),
            # Quick Stats
            rx.card(
                rx.hstack(
                    rx.vstack(
                        rx.text("📦", size="8"),
                        rx.text("Generated Apps", size="2", color="gray"),
                        rx.text(
                            GeneratorState.generated_apps.length(),
                            size="7",
                            weight="bold",
                            color="blue",
                        ),
                        align="center",
                        spacing="2",
                    ),
                    rx.vstack(
                        rx.text("🚀", size="8"),
                        rx.text("Running", size="2", color="gray"),
                        rx.text("1", size="7", weight="bold", color="green"),
                        align="center",
                        spacing="2",
                    ),
                    rx.vstack(
                        rx.text("⚡", size="8"),
                        rx.text("Templates", size="2", color="gray"),
                        rx.text("5", size="7", weight="bold", color="purple"),
                        align="center",
                        spacing="2",
                    ),
                    spacing="8",
                    justify="center",
                    width="100%",
                ),
                padding="6",
                width="100%",
            ),
            # New App Generator
            rx.card(
                rx.vstack(
                    rx.heading("➕ Generate New App", size="6"),
                    rx.vstack(
                        rx.vstack(
                            rx.text("Project Name", size="2", weight="medium"),
                            rx.input(
                                placeholder="e.g., my-dashboard",
                                on_change=GeneratorState.set_project_name,
                                size="3",
                                width="100%",
                            ),
                            spacing="2",
                            width="100%",
                        ),
                        rx.vstack(
                            rx.text("Description", size="2", weight="medium"),
                            rx.text_area(
                                placeholder="Describe what you want to build...",
                                on_change=GeneratorState.set_project_description,
                                size="3",
                                width="100%",
                                rows="4",
                            ),
                            spacing="2",
                            width="100%",
                        ),
                        spacing="4",
                        width="100%",
                    ),
                    rx.button(
                        "🎨 Generate App",
                        on_click=GeneratorState.generate_app,
                        size="3",
                        width="100%",
                    ),
                    rx.cond(
                        GeneratorState.generation_message != "",
                        rx.callout(
                            GeneratorState.generation_message,
                            icon=rx.cond(
                                GeneratorState.generation_status == "error",
                                "alert-triangle",
                                rx.cond(
                                    GeneratorState.generation_status == "success",
                                    "check",
                                    "info",
                                ),
                            ),
                            color=rx.cond(
                                GeneratorState.generation_status == "error",
                                "red",
                                rx.cond(
                                    GeneratorState.generation_status == "success",
                                    "green",
                                    "blue",
                                ),
                            ),
                        ),
                    ),
                    spacing="4",
                    width="100%",
                ),
                padding="6",
                width="100%",
            ),
            # Generated Apps
            rx.card(
                rx.vstack(
                    rx.heading("📱 Generated Applications", size="6"),
                    rx.vstack(
                        rx.foreach(GeneratorState.generated_apps, app_card),
                        spacing="3",
                        width="100%",
                    ),
                    spacing="4",
                    width="100%",
                ),
                padding="6",
                width="100%",
            ),
            # Templates
            rx.card(
                rx.vstack(
                    rx.heading("📚 Available Templates", size="6"),
                    rx.grid(
                        rx.card(
                            rx.vstack(
                                rx.text("📊", size="8"),
                                rx.heading("Dashboard", size="4"),
                                rx.text(
                                    "Analytics and data visualization",
                                    size="2",
                                    color="gray",
                                ),
                                rx.button("Use Template", variant="soft", size="2"),
                                spacing="3",
                                align="center",
                            ),
                            padding="4",
                        ),
                        rx.card(
                            rx.vstack(
                                rx.text("🔄", size="8"),
                                rx.heading("Integration Hub", size="4"),
                                rx.text(
                                    "Connect multiple data sources",
                                    size="2",
                                    color="gray",
                                ),
                                rx.button("Use Template", variant="soft", size="2"),
                                spacing="3",
                                align="center",
                            ),
                            padding="4",
                        ),
                        rx.card(
                            rx.vstack(
                                rx.text("💬", size="8"),
                                rx.heading("Chat App", size="4"),
                                rx.text(
                                    "Real-time messaging interface",
                                    size="2",
                                    color="gray",
                                ),
                                rx.button("Use Template", variant="soft", size="2"),
                                spacing="3",
                                align="center",
                            ),
                            padding="4",
                        ),
                        rx.card(
                            rx.vstack(
                                rx.text("🛍️", size="8"),
                                rx.heading("E-commerce", size="4"),
                                rx.text(
                                    "Online store with cart", size="2", color="gray"
                                ),
                                rx.button("Use Template", variant="soft", size="2"),
                                spacing="3",
                                align="center",
                            ),
                            padding="4",
                        ),
                        rx.card(
                            rx.vstack(
                                rx.text("📝", size="8"),
                                rx.heading("CMS", size="4"),
                                rx.text(
                                    "Content management system", size="2", color="gray"
                                ),
                                rx.button("Use Template", variant="soft", size="2"),
                                spacing="3",
                                align="center",
                            ),
                            padding="4",
                        ),
                        columns="3",
                        gap="4",
                        width="100%",
                    ),
                    spacing="4",
                    width="100%",
                ),
                padding="6",
                width="100%",
            ),
            spacing="6",
            padding="4",
            width="100%",
            max_width="1400px",
        ),
        padding="4",
        width="100%",
    )


# Create the app
app = rx.App()
app.add_page(index, title="Proto-DDF Generator")
